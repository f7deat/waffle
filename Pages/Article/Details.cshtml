@page "/article/{normalizedName}"
@using Waffle.Models.Components
@model Waffle.Pages.Article.DetailsModel

<main class="wf-article__detail">
    <div class="container">
        @if (Model.Catalog != null)
        {
            @await Component.InvokeAsync(nameof(Breadcrumb), Model.Catalog.Id)

            <div class="md:flex gap-4">
                <div class="md:w-2/3">

                    <h1 class="title">@Model.Catalog.Name</h1>
                    <div class="bg-white p-4 shadow mb-4">
                        @if (Model.BlockEditors != null)
                        {
                            @foreach (var item in Model.BlockEditors)
                            {
                                @await Component.InvokeAsync(nameof(BlockEditor), item)
                            }
                        }
                        <div class="wf-delimiter"></div>
                        @foreach (var item in Model.Tags)
                        {
                            <div class="mb-2">
                                <i class="fas fa-tag mr-2"></i>
                                <a href="/article/tag/@item.Id" class="wf-badge">@item.Name</a>
                            </div>
                        }
                    </div>
                </div>
                <div class="md:w-1/3">
                    @await Component.InvokeAsync(nameof(ArticlePicker))    
                </div>
            </div>

            @if (Model.Tags != null && Model.Tags.Any())
            {
                @await Component.InvokeAsync("Related", new Waffle.Entities.WorkItem {
                    CatalogId = Model.Catalog.Id,
                    WorkContentId = Model.Tags.OrderBy(x => Guid.NewGuid()).First().Id
                })
            }
        }
    </div>
</main>