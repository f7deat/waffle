@page
@using Waffle.Models.Components
@using Waffle.Models.Components.Specifications
@using Waffle.Models.Components.Lister
@model Waffle.Pages.Search.IndexModel

<div class="container">

    @await Html.PartialAsync("~/Pages/Shared/Components/Breadcrumb/Default.cshtml", await Model.GetBreadcrumbs())

    <div class="row">
        <div class="md:w-2/3">
            <div class="mb-2 flex items-center justify-between">
                <form class="mb-2" action="/search/index" method="get">
                    <div class="border rounded-full flex bg-white">
                        <input type="search" name="searchTerm" placeholder="Tìm kiếm..." class="flex-grow px-4 rounded-full" value="@Model.FilterOptions.SearchTerm" autocomplete="off">
                        <button type="submit" class="py-2 px-3">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </form>
                <div class="dropdown">
                    <button class="py-2 font-medium" data-bs-toggle="dropdown" aria-expanded="false" id="drp-sort">
                        <i class="fas fa-sort-amount-up"></i> Sắp xếp
                    </button>
                    <div class="dropdown-menu bg-white shadow dropdown-menu-end shadow-lg rounded" aria-labelledby="drp-sort">
                        <a class="py-2 px-4 flex items-center hover:bg-gray-100 w-full rounded-b" href="/search?searchTerm=@Model.FilterOptions.SearchTerm&orderBy=VIEW&amp;sortBy=ASCENDING&amp;current=1">Lượt xem</a>
                        <a class="py-2 px-4 flex items-center hover:bg-gray-100 w-full rounded-b" href="/search?searchTerm=@Model.FilterOptions.SearchTerm&orderBy=MODIFIED&amp;sortBy=ASCENDING&amp;current=1">Thời gian</a>
                    </div>
                </div>
            </div>
            <div class="title">@Model.Articles.Total kết quả tìm kiếm cho: @Model.FilterOptions.SearchTerm</div>
            @if (Model.Articles.HasData)
            {
                <partial name="~/Pages/Article/_List.cshtml" model="Model.Articles.Data" />
                <div class="pagination mb-4 flex justify-between">
                    @if (Model.Articles.HasPreviousPage)
                    {
                        <a href="/search/index?searchTerm=@Model.FilterOptions.SearchTerm&current=@(Model.FilterOptions.Current - 1)" class="px-4 py-1 rounded bg-white shadow">
                            <i class="fas fa-angle-double-left"></i>
                            <span>Trang trước</span>
                        </a>
                    }
                    @if (Model.Articles.HasNextPage)
                    {
                        <a href="/search/index?searchTerm=@Model.FilterOptions.SearchTerm&current=@(Model.FilterOptions.Current + 1)" class="px-4 py-1 rounded bg-white shadow">
                            <span>Trang sau</span>
                            <i class="fas fa-angle-double-right"></i>
                        </a>
                    }
                </div>
            }
            else
            {
                <div class="bg-white shadow px-4 py-2 rounded text-center mb-4">
                    Không có dữ liệu
                </div>
            }

            @await Html.PartialAsync("~/Pages/Shared/Components/Feed/Product.cshtml", Model.ProductFeed)

            @await Html.PartialAsync("/Pages/Shared/Components/VideoPlaylist/Default.cshtml", new VideoPlayList {
                Title = "Playlist",
                PlaylistItems = Model.PlaylistItems
            })

            @if (!string.IsNullOrWhiteSpace(Model.FilterOptions.SearchTerm))
            {
                <div class="mb-4 quote">
                    <u>Wiki</u> --> <a href="/wiki/@Waffle.Core.Helpers.SeoHelper.ToWikiFriendly(Model.FilterOptions.SearchTerm)">@Model.FilterOptions.SearchTerm</a>
                </div>
            }
        </div>
        <div class="md:w-1/3">
            @await Component.InvokeAsync(nameof(Waffle.ExternalAPI.Models.GoogleAggregate.Trend))
            @await Component.InvokeAsync(nameof(Tag))
            @await Component.InvokeAsync(nameof(ArticleSpotlight))
        </div>
    </div>
</div>