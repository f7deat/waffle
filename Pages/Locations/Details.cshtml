@page "/locations/{normalizedName}"
@using Waffle.Models.Components
@using Waffle.Models.Components.Specifications
@using Waffle.ViewComponents
@model Waffle.Pages.Locations.DetailsModel

<main class="wf-locations">
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                @await Component.InvokeAsync(nameof(Breadcrumb))

                <h1 class="title">@Model.PageData.Name</h1>
                <div class="mb-4 bg-white">
                    @foreach (var item in Model.Works)
                    {
                        @await Component.InvokeAsync(item.NormalizedName, item.Id)
                    }

                    @if (Model.HasTag)
                    {
                        <div class="wf-delimiter"></div>
                        <div class="mb-4 tags">
                            <i class="fas fa-tag mr-2"></i>
                            @foreach (var item in Model.Tags)
                            {
                                <a href="/tag/@item.NormalizedName" class="tag-item">@item.Name</a>
                            }
                        </div>
                    }

                    <div class="bg-gray-100 px-4 py-2 flex justify-between items-center text-gray-500 text-sm">
                        <div class="flex gap-4">
                            <span>
                                <i class="fas fa-eye mr-1"></i>
                                <span>@Model.PageData.ViewCount.ToString("N0")</span>
                            </span>
                            <span>|</span>
                            <span>
                                <i class="fas fa-calendar mr-1"></i>
                                <span>@Model.PageData.ModifiedDate</span>
                            </span>
                        </div>
                    </div>
                </div>

                <div class="mb-4">
                    @if (Model.IsAuthenticated)
                    {
                        <div class="card">
                            <div class="form-item">
                                <textarea class="form-control"></textarea>
                            </div>
                            <button type="button" class="btn btn-primary">
                                <i class="fa-solid fa-paper-plane-top"></i>
                                <span>Gửi bình luận</span>
                            </button>
                        </div>
                    }
                </div>

            </div>
            <div class="col-md-4">

                <div class="mb-4">
                    <div class="title">Direct for work</div>
                    <ul>
                        <li><i class="fab fa-instagram mr-1"></i>Instagram: <a href="https://www.instagram.com/f7deat/">f7deat</a></li>
                        <li><i class="fab fa-square-facebook mr-1"></i>Facebook: <a href="https://www.facebook.com/tan.dct/">Công Tân Đinh</a></li>
                        <li><i class="fas fa-square-phone mr-1"></i>SĐT/Zalo: <a href="tel:0762559696">0762.559.696</a></li>
                        <li><i class="fas fa-envelope mr-1"></i>Email: <a href="mailto:f7deat@gmail.com">f7deat@gmail.com</a></li>
                    </ul>
                </div>

                @await Component.InvokeAsync(nameof(ArticleSpotlight))
                @await Component.InvokeAsync(nameof(Tag))

                @if (Model.HasProduct)
                {
                    @await Html.PartialAsync("~/Pages/Shared/Components/Feed/Product.cshtml", Model.ProductFeed)
                }

                @await Component.InvokeAsync(nameof(Waffle.ExternalAPI.Models.GoogleAggregate.Trend))
            </div>
        </div>

        @if (Model.Tags.Any())
        {
            @await Component.InvokeAsync("Related", new RelatedProps {
                TagIds = Model.Tags.Select(x => x.Id)
            })
        }
    </div>
</main>