@page "/tag/{normalizedName}"
@using Waffle.Models.Components
@using Waffle.Models.Components.Specifications
@model Waffle.Pages.Tag.DetailsModel

<div class="container">
    <div class="wf-row gap-4">
        <div class="w-2/3">

            @await Component.InvokeAsync(nameof(Breadcrumb), Model.PageData.Id)

            <form class="mb-2" method="get">
                <div class="border rounded-full flex bg-white">
                    <input type="search" name="searchTerm" placeholder="Tìm kiếm..." class="flex-grow px-4 rounded-full" value="@Model.SearchTerm" autocomplete="off">
                    <button type="submit" class="py-2 px-3">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </form>

            <div class="title flex justify-between">
                <h1 class="text-base">
                    @Model.PageData.Name
                    <span class="font-normal">(@Model.Pagination.Total)</span>
                </h1>

            </div>
            <partial name="~/Pages/Article/_List.cshtml" model="Model.Catalogs" />
            <partial name="~/Views/Shared/Components/Pagination/Token.cshtml" model="Model.Pagination" />

            @if (Model.Products.Data != null && Model.Products.HasData)
            {
                <div class="title flex justify-between">
                    <div>Sản phẩm</div>
                    <div class="font-normal">
                        <span>@Model.Products.Total</span>
                    </div>
                </div>

                @await Html.PartialAsync("~/Views/Shared/Components/Feed/Product.cshtml", new Feed {
                    Name = "Sản phẩm",
                    Articles = Model.Products.Data.ToList()
                })
            }

            @if (Model.Albums.Data != null && Model.Albums.HasData)
            {
                <div class="title flex justify-between">
                    <div>Albums</div>
                    <div class="font-normal">
                        <span>@Model.Albums.Total</span>
                    </div>
                </div>
                <div class="grid grid-cols-4 gap-4 mb-4">
                    @foreach (var item in Model.Albums.Data)
                    {
                        <div class="card bg-white shadow rounded">
                            <div class="p-2">
                                <a href="/album/@item.NormalizedName">
                                    @item.Name
                                </a>
                            </div>
                        </div>
                    }
                </div>
            }

        </div>
        <div class="md:w-1/3">
            @await Component.InvokeAsync(nameof(ArticleSpotlight))
            @await Component.InvokeAsync(nameof(Tag))
        </div>
    </div>
</div>